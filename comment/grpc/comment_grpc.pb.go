// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: comment/grpc/comment.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	Retrieve(ctx context.Context, opts ...grpc.CallOption) (CommentService_RetrieveClient, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Retrieve(ctx context.Context, opts ...grpc.CallOption) (CommentService_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[0], "/CommentService/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceRetrieveClient{stream}
	return x, nil
}

type CommentService_RetrieveClient interface {
	Send(*RetrieveRequest) error
	CloseAndRecv() (*Comments, error)
	grpc.ClientStream
}

type commentServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *commentServiceRetrieveClient) Send(m *RetrieveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commentServiceRetrieveClient) CloseAndRecv() (*Comments, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Comments)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	Retrieve(CommentService_RetrieveServer) error
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) Retrieve(CommentService_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommentServiceServer).Retrieve(&commentServiceRetrieveServer{stream})
}

type CommentService_RetrieveServer interface {
	SendAndClose(*Comments) error
	Recv() (*RetrieveRequest, error)
	grpc.ServerStream
}

type commentServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *commentServiceRetrieveServer) SendAndClose(m *Comments) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commentServiceRetrieveServer) Recv() (*RetrieveRequest, error) {
	m := new(RetrieveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Retrieve",
			Handler:       _CommentService_Retrieve_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "comment/grpc/comment.proto",
}
